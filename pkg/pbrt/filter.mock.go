// Code generated by MockGen. DO NOT EDIT.
// Source: filter.go

// Package pbrt is a generated GoMock package.
package pbrt

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockFilter is a mock of Filter interface
type MockFilter struct {
	ctrl     *gomock.Controller
	recorder *MockFilterMockRecorder
}

// MockFilterMockRecorder is the mock recorder for MockFilter
type MockFilterMockRecorder struct {
	mock *MockFilter
}

// NewMockFilter creates a new mock instance
func NewMockFilter(ctrl *gomock.Controller) *MockFilter {
	mock := &MockFilter{ctrl: ctrl}
	mock.recorder = &MockFilterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFilter) EXPECT() *MockFilterMockRecorder {
	return m.recorder
}

// GetRadius mocks base method
func (m *MockFilter) GetRadius() *Point2f {
	ret := m.ctrl.Call(m, "GetRadius")
	ret0, _ := ret[0].(*Point2f)
	return ret0
}

// GetRadius indicates an expected call of GetRadius
func (mr *MockFilterMockRecorder) GetRadius() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRadius", reflect.TypeOf((*MockFilter)(nil).GetRadius))
}

// Evaluate mocks base method
func (m *MockFilter) Evaluate(p *Point2f) float64 {
	ret := m.ctrl.Call(m, "Evaluate", p)
	ret0, _ := ret[0].(float64)
	return ret0
}

// Evaluate indicates an expected call of Evaluate
func (mr *MockFilterMockRecorder) Evaluate(p interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Evaluate", reflect.TypeOf((*MockFilter)(nil).Evaluate), p)
}
