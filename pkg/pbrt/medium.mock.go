// Code generated by MockGen. DO NOT EDIT.
// Source: medium.go

// Package pbrt is a generated GoMock package.
package pbrt

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPhaseFunction is a mock of PhaseFunction interface
type MockPhaseFunction struct {
	ctrl     *gomock.Controller
	recorder *MockPhaseFunctionMockRecorder
}

// MockPhaseFunctionMockRecorder is the mock recorder for MockPhaseFunction
type MockPhaseFunctionMockRecorder struct {
	mock *MockPhaseFunction
}

// NewMockPhaseFunction creates a new mock instance
func NewMockPhaseFunction(ctrl *gomock.Controller) *MockPhaseFunction {
	mock := &MockPhaseFunction{ctrl: ctrl}
	mock.recorder = &MockPhaseFunctionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPhaseFunction) EXPECT() *MockPhaseFunctionMockRecorder {
	return m.recorder
}

// P mocks base method
func (m *MockPhaseFunction) P(wo, wi *Vector3f) float64 {
	ret := m.ctrl.Call(m, "P", wo, wi)
	ret0, _ := ret[0].(float64)
	return ret0
}

// P indicates an expected call of P
func (mr *MockPhaseFunctionMockRecorder) P(wo, wi interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "P", reflect.TypeOf((*MockPhaseFunction)(nil).P), wo, wi)
}

// SampleP mocks base method
func (m *MockPhaseFunction) SampleP(wo, wi *Vector3f, u *Point2f) float64 {
	ret := m.ctrl.Call(m, "SampleP", wo, wi, u)
	ret0, _ := ret[0].(float64)
	return ret0
}

// SampleP indicates an expected call of SampleP
func (mr *MockPhaseFunctionMockRecorder) SampleP(wo, wi, u interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SampleP", reflect.TypeOf((*MockPhaseFunction)(nil).SampleP), wo, wi, u)
}

// MockMedium is a mock of Medium interface
type MockMedium struct {
	ctrl     *gomock.Controller
	recorder *MockMediumMockRecorder
}

// MockMediumMockRecorder is the mock recorder for MockMedium
type MockMediumMockRecorder struct {
	mock *MockMedium
}

// NewMockMedium creates a new mock instance
func NewMockMedium(ctrl *gomock.Controller) *MockMedium {
	mock := &MockMedium{ctrl: ctrl}
	mock.recorder = &MockMediumMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMedium) EXPECT() *MockMediumMockRecorder {
	return m.recorder
}

// Tr mocks base method
func (m *MockMedium) Tr(r *Ray, s Sampler) Spectrum {
	ret := m.ctrl.Call(m, "Tr", r, s)
	ret0, _ := ret[0].(Spectrum)
	return ret0
}

// Tr indicates an expected call of Tr
func (mr *MockMediumMockRecorder) Tr(r, s interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tr", reflect.TypeOf((*MockMedium)(nil).Tr), r, s)
}

// Sample mocks base method
func (m *MockMedium) Sample(r *Ray, s Sampler, mi *MediumInteraction) Spectrum {
	ret := m.ctrl.Call(m, "Sample", r, s, mi)
	ret0, _ := ret[0].(Spectrum)
	return ret0
}

// Sample indicates an expected call of Sample
func (mr *MockMediumMockRecorder) Sample(r, s, mi interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sample", reflect.TypeOf((*MockMedium)(nil).Sample), r, s, mi)
}
