// Code generated by MockGen. DO NOT EDIT.
// Source: camera.go

// Package pbrt is a generated GoMock package.
package pbrt

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCamera is a mock of Camera interface
type MockCamera struct {
	ctrl     *gomock.Controller
	recorder *MockCameraMockRecorder
}

// MockCameraMockRecorder is the mock recorder for MockCamera
type MockCameraMockRecorder struct {
	mock *MockCamera
}

// NewMockCamera creates a new mock instance
func NewMockCamera(ctrl *gomock.Controller) *MockCamera {
	mock := &MockCamera{ctrl: ctrl}
	mock.recorder = &MockCameraMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCamera) EXPECT() *MockCameraMockRecorder {
	return m.recorder
}

// GenerateRay mocks base method
func (m *MockCamera) GenerateRay(sample *CameraSample) (float64, *Ray) {
	ret := m.ctrl.Call(m, "GenerateRay", sample)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(*Ray)
	return ret0, ret1
}

// GenerateRay indicates an expected call of GenerateRay
func (mr *MockCameraMockRecorder) GenerateRay(sample interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRay", reflect.TypeOf((*MockCamera)(nil).GenerateRay), sample)
}

// GenerateRayDifferential mocks base method
func (m *MockCamera) GenerateRayDifferential(sample *CameraSample) (float64, *RayDifferential) {
	ret := m.ctrl.Call(m, "GenerateRayDifferential", sample)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(*RayDifferential)
	return ret0, ret1
}

// GenerateRayDifferential indicates an expected call of GenerateRayDifferential
func (mr *MockCameraMockRecorder) GenerateRayDifferential(sample interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRayDifferential", reflect.TypeOf((*MockCamera)(nil).GenerateRayDifferential), sample)
}

// We mocks base method
func (m *MockCamera) We(r *Ray) (Spectrum, *Point2f) {
	ret := m.ctrl.Call(m, "We", r)
	ret0, _ := ret[0].(Spectrum)
	ret1, _ := ret[1].(*Point2f)
	return ret0, ret1
}

// We indicates an expected call of We
func (mr *MockCameraMockRecorder) We(r interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "We", reflect.TypeOf((*MockCamera)(nil).We), r)
}

// PdfWe mocks base method
func (m *MockCamera) PdfWe(r *Ray) (float64, float64) {
	ret := m.ctrl.Call(m, "PdfWe", r)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(float64)
	return ret0, ret1
}

// PdfWe indicates an expected call of PdfWe
func (mr *MockCameraMockRecorder) PdfWe(r interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PdfWe", reflect.TypeOf((*MockCamera)(nil).PdfWe), r)
}

// SampleWi mocks base method
func (m *MockCamera) SampleWi(ref Interaction, u *Point2f) (Spectrum, *Vector3f, float64, *Point2f, *VisibilityTester) {
	ret := m.ctrl.Call(m, "SampleWi", ref, u)
	ret0, _ := ret[0].(Spectrum)
	ret1, _ := ret[1].(*Vector3f)
	ret2, _ := ret[2].(float64)
	ret3, _ := ret[3].(*Point2f)
	ret4, _ := ret[4].(*VisibilityTester)
	return ret0, ret1, ret2, ret3, ret4
}

// SampleWi indicates an expected call of SampleWi
func (mr *MockCameraMockRecorder) SampleWi(ref, u interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SampleWi", reflect.TypeOf((*MockCamera)(nil).SampleWi), ref, u)
}

// GetFilm mocks base method
func (m *MockCamera) GetFilm() *Film {
	ret := m.ctrl.Call(m, "GetFilm")
	ret0, _ := ret[0].(*Film)
	return ret0
}

// GetFilm indicates an expected call of GetFilm
func (mr *MockCameraMockRecorder) GetFilm() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilm", reflect.TypeOf((*MockCamera)(nil).GetFilm))
}
