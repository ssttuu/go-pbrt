// Code generated by MockGen. DO NOT EDIT.
// Source: shape.go

// Package pbrt is a generated GoMock package.
package pbrt

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockShape is a mock of Shape interface
type MockShape struct {
	ctrl     *gomock.Controller
	recorder *MockShapeMockRecorder
}

// MockShapeMockRecorder is the mock recorder for MockShape
type MockShapeMockRecorder struct {
	mock *MockShape
}

// NewMockShape creates a new mock instance
func NewMockShape(ctrl *gomock.Controller) *MockShape {
	mock := &MockShape{ctrl: ctrl}
	mock.recorder = &MockShapeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockShape) EXPECT() *MockShapeMockRecorder {
	return m.recorder
}

// GetName mocks base method
func (m *MockShape) GetName() string {
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName
func (mr *MockShapeMockRecorder) GetName() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockShape)(nil).GetName))
}

// ObjectBound mocks base method
func (m *MockShape) ObjectBound() *Bounds3 {
	ret := m.ctrl.Call(m, "ObjectBound")
	ret0, _ := ret[0].(*Bounds3)
	return ret0
}

// ObjectBound indicates an expected call of ObjectBound
func (mr *MockShapeMockRecorder) ObjectBound() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectBound", reflect.TypeOf((*MockShape)(nil).ObjectBound))
}

// WorldBound mocks base method
func (m *MockShape) WorldBound() *Bounds3 {
	ret := m.ctrl.Call(m, "WorldBound")
	ret0, _ := ret[0].(*Bounds3)
	return ret0
}

// WorldBound indicates an expected call of WorldBound
func (mr *MockShapeMockRecorder) WorldBound() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorldBound", reflect.TypeOf((*MockShape)(nil).WorldBound))
}

// ReverseOrientation mocks base method
func (m *MockShape) ReverseOrientation() bool {
	ret := m.ctrl.Call(m, "ReverseOrientation")
	ret0, _ := ret[0].(bool)
	return ret0
}

// ReverseOrientation indicates an expected call of ReverseOrientation
func (mr *MockShapeMockRecorder) ReverseOrientation() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReverseOrientation", reflect.TypeOf((*MockShape)(nil).ReverseOrientation))
}

// TransformSwapsHandedness mocks base method
func (m *MockShape) TransformSwapsHandedness() bool {
	ret := m.ctrl.Call(m, "TransformSwapsHandedness")
	ret0, _ := ret[0].(bool)
	return ret0
}

// TransformSwapsHandedness indicates an expected call of TransformSwapsHandedness
func (mr *MockShapeMockRecorder) TransformSwapsHandedness() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransformSwapsHandedness", reflect.TypeOf((*MockShape)(nil).TransformSwapsHandedness))
}

// Intersect mocks base method
func (m *MockShape) Intersect(r *Ray, si *SurfaceInteraction, testAlphaTexture bool) (bool, float64) {
	ret := m.ctrl.Call(m, "Intersect", r, si, testAlphaTexture)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(float64)
	return ret0, ret1
}

// Intersect indicates an expected call of Intersect
func (mr *MockShapeMockRecorder) Intersect(r, si, testAlphaTexture interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersect", reflect.TypeOf((*MockShape)(nil).Intersect), r, si, testAlphaTexture)
}

// IntersectP mocks base method
func (m *MockShape) IntersectP(r *Ray, testAlphaTexture bool) bool {
	ret := m.ctrl.Call(m, "IntersectP", r, testAlphaTexture)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IntersectP indicates an expected call of IntersectP
func (mr *MockShapeMockRecorder) IntersectP(r, testAlphaTexture interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IntersectP", reflect.TypeOf((*MockShape)(nil).IntersectP), r, testAlphaTexture)
}

// Sample mocks base method
func (m *MockShape) Sample(u *Point2f) (Interaction, float64) {
	ret := m.ctrl.Call(m, "Sample", u)
	ret0, _ := ret[0].(Interaction)
	ret1, _ := ret[1].(float64)
	return ret0, ret1
}

// Sample indicates an expected call of Sample
func (mr *MockShapeMockRecorder) Sample(u interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sample", reflect.TypeOf((*MockShape)(nil).Sample), u)
}

// SampleAtInteraction mocks base method
func (m *MockShape) SampleAtInteraction(ref Interaction, u *Point2f) (Interaction, float64) {
	ret := m.ctrl.Call(m, "SampleAtInteraction", ref, u)
	ret0, _ := ret[0].(Interaction)
	ret1, _ := ret[1].(float64)
	return ret0, ret1
}

// SampleAtInteraction indicates an expected call of SampleAtInteraction
func (mr *MockShapeMockRecorder) SampleAtInteraction(ref, u interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SampleAtInteraction", reflect.TypeOf((*MockShape)(nil).SampleAtInteraction), ref, u)
}

// Pdf mocks base method
func (m *MockShape) Pdf(ref Interaction) float64 {
	ret := m.ctrl.Call(m, "Pdf", ref)
	ret0, _ := ret[0].(float64)
	return ret0
}

// Pdf indicates an expected call of Pdf
func (mr *MockShapeMockRecorder) Pdf(ref interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pdf", reflect.TypeOf((*MockShape)(nil).Pdf), ref)
}

// PdfWi mocks base method
func (m *MockShape) PdfWi(ref Interaction, wi *Vector3f) float64 {
	ret := m.ctrl.Call(m, "PdfWi", ref, wi)
	ret0, _ := ret[0].(float64)
	return ret0
}

// PdfWi indicates an expected call of PdfWi
func (mr *MockShapeMockRecorder) PdfWi(ref, wi interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PdfWi", reflect.TypeOf((*MockShape)(nil).PdfWi), ref, wi)
}

// SolidAngle mocks base method
func (m *MockShape) SolidAngle(p *Point3f, nSamples int) float64 {
	ret := m.ctrl.Call(m, "SolidAngle", p, nSamples)
	ret0, _ := ret[0].(float64)
	return ret0
}

// SolidAngle indicates an expected call of SolidAngle
func (mr *MockShapeMockRecorder) SolidAngle(p, nSamples interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SolidAngle", reflect.TypeOf((*MockShape)(nil).SolidAngle), p, nSamples)
}

// Area mocks base method
func (m *MockShape) Area() float64 {
	ret := m.ctrl.Call(m, "Area")
	ret0, _ := ret[0].(float64)
	return ret0
}

// Area indicates an expected call of Area
func (mr *MockShapeMockRecorder) Area() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Area", reflect.TypeOf((*MockShape)(nil).Area))
}
