// Code generated by MockGen. DO NOT EDIT.
// Source: sampler.go

// Package pbrt is a generated GoMock package.
package pbrt

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSampler is a mock of Sampler interface
type MockSampler struct {
	ctrl     *gomock.Controller
	recorder *MockSamplerMockRecorder
}

// MockSamplerMockRecorder is the mock recorder for MockSampler
type MockSamplerMockRecorder struct {
	mock *MockSampler
}

// NewMockSampler creates a new mock instance
func NewMockSampler(ctrl *gomock.Controller) *MockSampler {
	mock := &MockSampler{ctrl: ctrl}
	mock.recorder = &MockSamplerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSampler) EXPECT() *MockSamplerMockRecorder {
	return m.recorder
}

// GetSamplesPerPixel mocks base method
func (m *MockSampler) GetSamplesPerPixel() int64 {
	ret := m.ctrl.Call(m, "GetSamplesPerPixel")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetSamplesPerPixel indicates an expected call of GetSamplesPerPixel
func (mr *MockSamplerMockRecorder) GetSamplesPerPixel() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSamplesPerPixel", reflect.TypeOf((*MockSampler)(nil).GetSamplesPerPixel))
}

// Clone mocks base method
func (m *MockSampler) Clone(seed uint64) Sampler {
	ret := m.ctrl.Call(m, "Clone", seed)
	ret0, _ := ret[0].(Sampler)
	return ret0
}

// Clone indicates an expected call of Clone
func (mr *MockSamplerMockRecorder) Clone(seed interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockSampler)(nil).Clone), seed)
}

// Get1D mocks base method
func (m *MockSampler) Get1D() float64 {
	ret := m.ctrl.Call(m, "Get1D")
	ret0, _ := ret[0].(float64)
	return ret0
}

// Get1D indicates an expected call of Get1D
func (mr *MockSamplerMockRecorder) Get1D() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get1D", reflect.TypeOf((*MockSampler)(nil).Get1D))
}

// Get2D mocks base method
func (m *MockSampler) Get2D() *Point2f {
	ret := m.ctrl.Call(m, "Get2D")
	ret0, _ := ret[0].(*Point2f)
	return ret0
}

// Get2D indicates an expected call of Get2D
func (mr *MockSamplerMockRecorder) Get2D() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get2D", reflect.TypeOf((*MockSampler)(nil).Get2D))
}

// Get1DArray mocks base method
func (m *MockSampler) Get1DArray(n int) []float64 {
	ret := m.ctrl.Call(m, "Get1DArray", n)
	ret0, _ := ret[0].([]float64)
	return ret0
}

// Get1DArray indicates an expected call of Get1DArray
func (mr *MockSamplerMockRecorder) Get1DArray(n interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get1DArray", reflect.TypeOf((*MockSampler)(nil).Get1DArray), n)
}

// Get2DArray mocks base method
func (m *MockSampler) Get2DArray(n int) []*Point2f {
	ret := m.ctrl.Call(m, "Get2DArray", n)
	ret0, _ := ret[0].([]*Point2f)
	return ret0
}

// Get2DArray indicates an expected call of Get2DArray
func (mr *MockSamplerMockRecorder) Get2DArray(n interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get2DArray", reflect.TypeOf((*MockSampler)(nil).Get2DArray), n)
}

// GetCameraSample mocks base method
func (m *MockSampler) GetCameraSample(pRaster *Point2i) *CameraSample {
	ret := m.ctrl.Call(m, "GetCameraSample", pRaster)
	ret0, _ := ret[0].(*CameraSample)
	return ret0
}

// GetCameraSample indicates an expected call of GetCameraSample
func (mr *MockSamplerMockRecorder) GetCameraSample(pRaster interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCameraSample", reflect.TypeOf((*MockSampler)(nil).GetCameraSample), pRaster)
}

// StartPixel mocks base method
func (m *MockSampler) StartPixel(p *Point2i) {
	m.ctrl.Call(m, "StartPixel", p)
}

// StartPixel indicates an expected call of StartPixel
func (mr *MockSamplerMockRecorder) StartPixel(p interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartPixel", reflect.TypeOf((*MockSampler)(nil).StartPixel), p)
}

// StartNextSample mocks base method
func (m *MockSampler) StartNextSample() bool {
	ret := m.ctrl.Call(m, "StartNextSample")
	ret0, _ := ret[0].(bool)
	return ret0
}

// StartNextSample indicates an expected call of StartNextSample
func (mr *MockSamplerMockRecorder) StartNextSample() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartNextSample", reflect.TypeOf((*MockSampler)(nil).StartNextSample))
}

// RoundCount mocks base method
func (m *MockSampler) RoundCount(n int) int {
	ret := m.ctrl.Call(m, "RoundCount", n)
	ret0, _ := ret[0].(int)
	return ret0
}

// RoundCount indicates an expected call of RoundCount
func (mr *MockSamplerMockRecorder) RoundCount(n interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoundCount", reflect.TypeOf((*MockSampler)(nil).RoundCount), n)
}

// Request2DArray mocks base method
func (m *MockSampler) Request2DArray(n int) {
	m.ctrl.Call(m, "Request2DArray", n)
}

// Request2DArray indicates an expected call of Request2DArray
func (mr *MockSamplerMockRecorder) Request2DArray(n interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Request2DArray", reflect.TypeOf((*MockSampler)(nil).Request2DArray), n)
}
